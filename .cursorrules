# Git操作ルール

## コミットメッセージ
- 先頭は英語で機能名や修正内容を記載（例：「Fix: camera access issue」）
- 本文は日本語で詳細を記述可
- プレフィックスを使用（Fix/Add/Update/Remove/Refactor）

## ブランチ戦略
- prod: リリース用ブランチ（直接コミット禁止）
- develop: 開発用ブランチ（派生ブランチの合流元）
- feature/*: 新機能開発（developから分岐）
- fix/*: バグ修正（developから分岐）

## GitHub CLI操作
- 改行を含むコメントは明示的に\nを使用（例：gh pr comment --body "First line\nSecond line"）
- 特殊文字を含む場合は$構文を使用（例：gh pr create --title $'Fix: line-break\nissue'）

## 作業ルール
- コミット前にlintとテスト実行
- 大きな変更は小さく分割してコミット
- 機密情報のコミット禁止（.env等）

## Cloudflareデプロイ手順

### 準備
- Cloudflareアカウントの作成と必要な権限の設定
- Wranglerのインストール: `npm install -g wrangler`
- プロジェクトルートで認証: `wrangler login`

### D1データベースセットアップ
1. 開発用データベース作成:
   ```bash
   wrangler d1 create <DB_NAME>_dev
   ```
2. 本番用データベース作成:
   ```bash
   wrangler d1 create <DB_NAME>_prod
   ```
3. `wrangler.toml`に各環境のデータベース設定を追加:
   ```toml
   # 開発環境用
   [[d1_databases]]
   binding = "DB"
   database_name = "<DB_NAME>_dev"
   database_id = "<DEV_DB_ID>"
   migrations_dir = "src/db/migrations"

   # 本番環境用
   [env.production]
   [[env.production.d1_databases]]
   binding = "DB"
   database_name = "<DB_NAME>_prod"
   database_id = "<PROD_DB_ID>"
   ```

### マイグレーション実行
1. 開発環境:
   ```bash
   wrangler d1 migrations apply <DB_NAME>_dev --local
   ```
2. 本番環境:
   ```bash
   wrangler d1 execute <DB_NAME>_prod --file ./src/db/migrations/*.sql --env production --remote
   ```

### デプロイ実行
1. 開発環境での動作確認:
   ```bash
   wrangler dev src/index.ts --local
   ```
2. 本番環境へのデプロイ:
   ```bash
   wrangler deploy src/index.ts --env production
   ```

### トラブルシューティング
- マイグレーションエラー時は`--migrations-dir`オプションで正しいパスを指定
- デプロイエラー時は`--verbose`フラグで詳細なログを確認
- Node.js互換性の問題は`compatibility_flags = ["nodejs_compat"]`を設定

### 環境変数の扱い
- 機密情報は`wrangler secret put <KEY>`で設定
- 環境変数を変更した場合は再デプロイが必要

### カスタムドメイン設定
- Cloudflareダッシュボードで「Workers & Pages」→「ドメイン」から設定
- カスタムドメインにはCloudflareのDNSを使用推奨

## よくある問題と対処法

### Next.jsのエッジランタイム制限
- `edge`関数で使用できないNode.js APIがある
- 解決策: Next.jsのmiddlewareを使用するか、Cloudflare固有のAPIに置き換える

### 大きなサイズのアセット
- Cloudflare Workersのサイズ制限（最大1MB）に注意
- 解決策: 大きなアセットはR2に格納し、Workers経由で配信

### D1の同時接続数制限
- 多数の同時DB接続でエラーが発生することがある
- 解決策: コネクションプールの設定とクエリの最適化

### 環境変数の扱い
- 機密情報は`wrangler secret put <KEY>`で設定
- 環境変数を変更した場合は再デプロイが必要

### カスタムドメイン設定
- Cloudflareダッシュボードで「Workers & Pages」→「ドメイン」から設定
- カスタムドメインにはCloudflareのDNSを使用推奨 